version: 2.1

orbs:
  node: circleci/node@5.2.0

parameters:
  run-backend-jobs:
    type: boolean
    default: false

jobs:
  build:
    executor:
      name: node/default
      tag: "18.16"
    steps:
      - checkout
      - run:
          command: |
            cd api
            node --version
            npm install
            npm run build
  unit_tests:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          command: |
            cd api
            node --version
            npm install
            npm run build
            npm run test:ci
  deploy_dev:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    environment:
      ENV: dev
    steps:
      - run:
          name: Deploy Introspection's api to Dev Environment
          command: |
            response=$(curl -s -w "%{http_code}" -o response.txt $DEPLOY_DEV_URI)
            response_code=${response:(-3)}
            if [ $response_code -eq 200 ]; then
              echo "Deployment to dev env successful!"
              cat response.txt  # Print the response body
            else
              echo "Deployment to dev env failed with response code: $response_code"
              cat response.txt  # Print the response body
              exit 1
            fi
  deploy_prod:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    environment:
      ENV: prod
    steps:
      - run:
          name: Deploy Introspection's api to PROD Environment
          command: |
            response=$(curl -s -w "%{http_code}" -o response.txt $DEPLOY_PROD_URI)
            response_code=${response:(-3)}
            if [ $response_code -eq 200 ]; then
              echo "Deployment to production successful!"
              cat response.txt  # Print the response body
            else
              echo "Deployment to production failed with response code: $response_code"
              cat response.txt  # Print the response body
              exit 1
            fi

workflows:
  api:
    when: << pipeline.parameters.run-backend-jobs >>
    jobs:
      - build
      - unit_tests:
          requires:
            - build
      - request_manual_approve_before_deploy_to_dev:
          type: approval
          requires:
            - build
            - unit_tests
      - deploy_dev:
          requires:
            - request_manual_approve_before_deploy_to_dev
          filters:
            branches:
              only: master
      - request_manual_approve_before_deploy_to_prod:
          type: approval
          requires:
            - deploy_dev
      - deploy_prod:
          requires:
            - request_manual_approve_before_deploy_to_prod
          filters:
            branches:
              only: master
